// Code generated by protoc-gen-go. DO NOT EDIT.
// source: patient.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PatientData struct {
	ManagingOrganization *ManagingOrganization `protobuf:"bytes,1,opt,name=managingOrganization" json:"managingOrganization,omitempty"`
	MaritalStatus        *MaritalStatus        `protobuf:"bytes,2,opt,name=maritalStatus" json:"maritalStatus,omitempty"`
	Name                 []*Name               `protobuf:"bytes,3,rep,name=name" json:"name,omitempty"`
	DeceasedBoolean      bool                  `protobuf:"varint,4,opt,name=deceasedBoolean" json:"deceasedBoolean,omitempty"`
	ResourceType         string                `protobuf:"bytes,5,opt,name=resourceType" json:"resourceType,omitempty"`
	Text                 *Text                 `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Address              []*Address            `protobuf:"bytes,7,rep,name=address" json:"address,omitempty"`
	Communication        []*Communication      `protobuf:"bytes,8,rep,name=communication" json:"communication,omitempty"`
	BirthDate            string                `protobuf:"bytes,9,opt,name=birthDate" json:"birthDate,omitempty"`
	Telecom              []*Telecom            `protobuf:"bytes,10,rep,name=telecom" json:"telecom,omitempty"`
	Contact              []*Contact            `protobuf:"bytes,11,rep,name=contact" json:"contact,omitempty"`
	Gender               string                `protobuf:"bytes,12,opt,name=gender" json:"gender,omitempty"`
	Active               bool                  `protobuf:"varint,13,opt,name=active" json:"active,omitempty"`
	MultipleBirthBoolean bool                  `protobuf:"varint,14,opt,name=multipleBirthBoolean" json:"multipleBirthBoolean,omitempty"`
	Identifier           []*Identifier         `protobuf:"bytes,15,rep,name=identifier" json:"identifier,omitempty"`
	Meta                 *Meta                 `protobuf:"bytes,16,opt,name=meta" json:"meta,omitempty"`
	Id                   string                `protobuf:"bytes,17,opt,name=id" json:"id,omitempty"`
}

func (m *PatientData) Reset()                    { *m = PatientData{} }
func (m *PatientData) String() string            { return proto.CompactTextString(m) }
func (*PatientData) ProtoMessage()               {}
func (*PatientData) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *PatientData) GetManagingOrganization() *ManagingOrganization {
	if m != nil {
		return m.ManagingOrganization
	}
	return nil
}

func (m *PatientData) GetMaritalStatus() *MaritalStatus {
	if m != nil {
		return m.MaritalStatus
	}
	return nil
}

func (m *PatientData) GetName() []*Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PatientData) GetDeceasedBoolean() bool {
	if m != nil {
		return m.DeceasedBoolean
	}
	return false
}

func (m *PatientData) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *PatientData) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *PatientData) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PatientData) GetCommunication() []*Communication {
	if m != nil {
		return m.Communication
	}
	return nil
}

func (m *PatientData) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *PatientData) GetTelecom() []*Telecom {
	if m != nil {
		return m.Telecom
	}
	return nil
}

func (m *PatientData) GetContact() []*Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *PatientData) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *PatientData) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *PatientData) GetMultipleBirthBoolean() bool {
	if m != nil {
		return m.MultipleBirthBoolean
	}
	return false
}

func (m *PatientData) GetIdentifier() []*Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *PatientData) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PatientData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MaritalStatus struct {
	Text   string    `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Coding []*Coding `protobuf:"bytes,2,rep,name=coding" json:"coding,omitempty"`
}

func (m *MaritalStatus) Reset()                    { *m = MaritalStatus{} }
func (m *MaritalStatus) String() string            { return proto.CompactTextString(m) }
func (*MaritalStatus) ProtoMessage()               {}
func (*MaritalStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *MaritalStatus) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MaritalStatus) GetCoding() []*Coding {
	if m != nil {
		return m.Coding
	}
	return nil
}

func init() {
	proto.RegisterType((*PatientData)(nil), "buffer.PatientData")
	proto.RegisterType((*MaritalStatus)(nil), "buffer.MaritalStatus")
}

func init() { proto.RegisterFile("patient.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x95, 0xb4, 0xdd, 0x36, 0xce, 0x3f, 0xb0, 0x0a, 0xb2, 0x50, 0x0f, 0xab, 0x1c, 0xd0,
	0x72, 0xc9, 0x21, 0x1c, 0x39, 0xd1, 0xf6, 0x82, 0x50, 0xa1, 0x32, 0x79, 0x81, 0x89, 0x3d, 0x59,
	0x2c, 0xad, 0xed, 0xc8, 0x3b, 0x8b, 0x0a, 0xcf, 0xc9, 0x03, 0x21, 0x7b, 0xb3, 0x49, 0x16, 0xe5,
	0xe8, 0xef, 0xf7, 0x79, 0xe6, 0xf3, 0xcc, 0x2e, 0x9b, 0xee, 0x80, 0x0c, 0x3a, 0x5a, 0xee, 0x82,
	0x27, 0xcf, 0xb3, 0x4d, 0xb3, 0xdd, 0x62, 0x78, 0x37, 0x51, 0xde, 0x5a, 0xef, 0x5a, 0x75, 0xf1,
	0xf7, 0x8a, 0x8d, 0x9f, 0x5b, 0xdf, 0x23, 0x10, 0xf0, 0x67, 0x76, 0x6b, 0xc1, 0x41, 0x69, 0x5c,
	0xf9, 0x3d, 0x94, 0xe0, 0xcc, 0x1f, 0x20, 0xe3, 0x9d, 0x18, 0xe4, 0x83, 0x62, 0xbc, 0xba, 0x5b,
	0xb6, 0x45, 0x96, 0x4f, 0x67, 0x3c, 0xf2, 0xec, 0x4d, 0xfe, 0x89, 0x4d, 0x2d, 0x04, 0x43, 0x50,
	0xfd, 0x20, 0xa0, 0xa6, 0x16, 0xc3, 0x54, 0xea, 0xcd, 0xb1, 0xd4, 0x09, 0x94, 0x7d, 0x2f, 0xcf,
	0xd9, 0xa5, 0x03, 0x8b, 0xe2, 0x22, 0xbf, 0x28, 0xc6, 0xab, 0x49, 0x77, 0xe7, 0x1b, 0x58, 0x94,
	0x89, 0xf0, 0x82, 0xcd, 0x35, 0x2a, 0x84, 0x1a, 0xf5, 0xbd, 0xf7, 0x15, 0x82, 0x13, 0x97, 0xf9,
	0xa0, 0xb8, 0x91, 0xff, 0xcb, 0x7c, 0xc1, 0x26, 0x01, 0x6b, 0xdf, 0x04, 0x85, 0xeb, 0xdf, 0x3b,
	0x14, 0x57, 0xf9, 0xa0, 0x18, 0xc9, 0x9e, 0x16, 0xfb, 0x11, 0xbe, 0x90, 0xc8, 0x52, 0xc6, 0x43,
	0xbf, 0x35, 0xbe, 0x90, 0x4c, 0x84, 0x7f, 0x60, 0xd7, 0xa0, 0x75, 0xc0, 0xba, 0x16, 0xd7, 0x29,
	0xd4, 0xbc, 0x33, 0x7d, 0x6e, 0x65, 0xd9, 0xf1, 0xf8, 0xf2, 0x38, 0xeb, 0xc6, 0x19, 0xd5, 0x0e,
	0xf1, 0x26, 0x5d, 0x38, 0xbc, 0xfc, 0xe1, 0x14, 0xca, 0xbe, 0x97, 0xdf, 0xb1, 0xd1, 0xc6, 0x04,
	0xfa, 0xf9, 0x08, 0x84, 0x62, 0x94, 0xa2, 0x1e, 0x85, 0x98, 0x82, 0xb0, 0x42, 0xe5, 0xad, 0x60,
	0xfd, 0x14, 0xeb, 0x56, 0x96, 0x1d, 0x8f, 0x56, 0xe5, 0x1d, 0x81, 0x22, 0x31, 0xee, 0x5b, 0x1f,
	0x5a, 0x59, 0x76, 0x9c, 0xbf, 0x65, 0x59, 0x89, 0x4e, 0x63, 0x10, 0x93, 0xd4, 0x70, 0x7f, 0x8a,
	0x3a, 0x28, 0x32, 0xbf, 0x50, 0x4c, 0xd3, 0x68, 0xf7, 0x27, 0xbe, 0x62, 0xb7, 0xb6, 0xa9, 0xc8,
	0xec, 0x2a, 0xbc, 0x8f, 0xd1, 0xba, 0x05, 0xcc, 0x92, 0xeb, 0x2c, 0xe3, 0x2b, 0xc6, 0x8c, 0x46,
	0x47, 0x66, 0x6b, 0x30, 0x88, 0x79, 0x4a, 0xc4, 0xbb, 0x44, 0x5f, 0x0e, 0x44, 0x9e, 0xb8, 0xe2,
	0x56, 0x2c, 0x12, 0x88, 0x57, 0xfd, 0xad, 0x3c, 0x21, 0x81, 0x4c, 0x84, 0xcf, 0xd8, 0xd0, 0x68,
	0xf1, 0x3a, 0xa5, 0x1e, 0x1a, 0xbd, 0xf8, 0xca, 0xa6, 0xbd, 0xef, 0x8a, 0xf3, 0xfd, 0x62, 0x07,
	0xc9, 0xd2, 0xae, 0xf2, 0x3d, 0xcb, 0x94, 0xd7, 0xc6, 0x95, 0x62, 0x98, 0x62, 0xcc, 0x8e, 0x83,
	0x89, 0xaa, 0xdc, 0xd3, 0x4d, 0x96, 0x7e, 0x95, 0x8f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31,
	0xb5, 0x45, 0x03, 0x51, 0x03, 0x00, 0x00,
}
