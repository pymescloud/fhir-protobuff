// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fhirServer.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ID struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ID) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type QueryString struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QueryString) Reset()                    { *m = QueryString{} }
func (m *QueryString) String() string            { return proto.CompactTextString(m) }
func (*QueryString) ProtoMessage()               {}
func (*QueryString) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *QueryString) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type FHIRUpdateResource struct {
	SytemIdentifier *ID `protobuf:"bytes,14,opt,name=sytemIdentifier" json:"sytemIdentifier,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*FHIRUpdateResource_Patient
	//	*FHIRUpdateResource_Provider
	//	*FHIRUpdateResource_AllergyIntolerance
	//	*FHIRUpdateResource_Encounter
	//	*FHIRUpdateResource_Condition
	//	*FHIRUpdateResource_Procedure
	//	*FHIRUpdateResource_MedicationRequest
	//	*FHIRUpdateResource_Observation
	//	*FHIRUpdateResource_DiagnosticReport
	//	*FHIRUpdateResource_Immunication
	//	*FHIRUpdateResource_CarePlan
	//	*FHIRUpdateResource_Goal
	//	*FHIRUpdateResource_Organization
	Resource isFHIRUpdateResource_Resource `protobuf_oneof:"resource"`
}

func (m *FHIRUpdateResource) Reset()                    { *m = FHIRUpdateResource{} }
func (m *FHIRUpdateResource) String() string            { return proto.CompactTextString(m) }
func (*FHIRUpdateResource) ProtoMessage()               {}
func (*FHIRUpdateResource) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

type isFHIRUpdateResource_Resource interface {
	isFHIRUpdateResource_Resource()
}

type FHIRUpdateResource_Patient struct {
	Patient *PatientData `protobuf:"bytes,1,opt,name=patient,oneof"`
}
type FHIRUpdateResource_Provider struct {
	Provider *PractitionerData `protobuf:"bytes,2,opt,name=provider,oneof"`
}
type FHIRUpdateResource_AllergyIntolerance struct {
	AllergyIntolerance *AllergyIntolerance `protobuf:"bytes,3,opt,name=allergy_intolerance,json=allergyIntolerance,oneof"`
}
type FHIRUpdateResource_Encounter struct {
	Encounter *Encounter `protobuf:"bytes,4,opt,name=encounter,oneof"`
}
type FHIRUpdateResource_Condition struct {
	Condition *ConditionData `protobuf:"bytes,5,opt,name=condition,oneof"`
}
type FHIRUpdateResource_Procedure struct {
	Procedure *Procedure `protobuf:"bytes,6,opt,name=procedure,oneof"`
}
type FHIRUpdateResource_MedicationRequest struct {
	MedicationRequest *MedicationRequest `protobuf:"bytes,7,opt,name=medication_request,json=medicationRequest,oneof"`
}
type FHIRUpdateResource_Observation struct {
	Observation *Observation `protobuf:"bytes,8,opt,name=observation,oneof"`
}
type FHIRUpdateResource_DiagnosticReport struct {
	DiagnosticReport *DiagnosticReport `protobuf:"bytes,9,opt,name=diagnostic_report,json=diagnosticReport,oneof"`
}
type FHIRUpdateResource_Immunication struct {
	Immunication *Immunization `protobuf:"bytes,10,opt,name=immunication,oneof"`
}
type FHIRUpdateResource_CarePlan struct {
	CarePlan *CarePlan `protobuf:"bytes,11,opt,name=care_plan,json=carePlan,oneof"`
}
type FHIRUpdateResource_Goal struct {
	Goal *Goal `protobuf:"bytes,12,opt,name=goal,oneof"`
}
type FHIRUpdateResource_Organization struct {
	Organization *OrganizationData `protobuf:"bytes,13,opt,name=organization,oneof"`
}

func (*FHIRUpdateResource_Patient) isFHIRUpdateResource_Resource()            {}
func (*FHIRUpdateResource_Provider) isFHIRUpdateResource_Resource()           {}
func (*FHIRUpdateResource_AllergyIntolerance) isFHIRUpdateResource_Resource() {}
func (*FHIRUpdateResource_Encounter) isFHIRUpdateResource_Resource()          {}
func (*FHIRUpdateResource_Condition) isFHIRUpdateResource_Resource()          {}
func (*FHIRUpdateResource_Procedure) isFHIRUpdateResource_Resource()          {}
func (*FHIRUpdateResource_MedicationRequest) isFHIRUpdateResource_Resource()  {}
func (*FHIRUpdateResource_Observation) isFHIRUpdateResource_Resource()        {}
func (*FHIRUpdateResource_DiagnosticReport) isFHIRUpdateResource_Resource()   {}
func (*FHIRUpdateResource_Immunication) isFHIRUpdateResource_Resource()       {}
func (*FHIRUpdateResource_CarePlan) isFHIRUpdateResource_Resource()           {}
func (*FHIRUpdateResource_Goal) isFHIRUpdateResource_Resource()               {}
func (*FHIRUpdateResource_Organization) isFHIRUpdateResource_Resource()       {}

func (m *FHIRUpdateResource) GetResource() isFHIRUpdateResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *FHIRUpdateResource) GetSytemIdentifier() *ID {
	if m != nil {
		return m.SytemIdentifier
	}
	return nil
}

func (m *FHIRUpdateResource) GetPatient() *PatientData {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Patient); ok {
		return x.Patient
	}
	return nil
}

func (m *FHIRUpdateResource) GetProvider() *PractitionerData {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Provider); ok {
		return x.Provider
	}
	return nil
}

func (m *FHIRUpdateResource) GetAllergyIntolerance() *AllergyIntolerance {
	if x, ok := m.GetResource().(*FHIRUpdateResource_AllergyIntolerance); ok {
		return x.AllergyIntolerance
	}
	return nil
}

func (m *FHIRUpdateResource) GetEncounter() *Encounter {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Encounter); ok {
		return x.Encounter
	}
	return nil
}

func (m *FHIRUpdateResource) GetCondition() *ConditionData {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Condition); ok {
		return x.Condition
	}
	return nil
}

func (m *FHIRUpdateResource) GetProcedure() *Procedure {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Procedure); ok {
		return x.Procedure
	}
	return nil
}

func (m *FHIRUpdateResource) GetMedicationRequest() *MedicationRequest {
	if x, ok := m.GetResource().(*FHIRUpdateResource_MedicationRequest); ok {
		return x.MedicationRequest
	}
	return nil
}

func (m *FHIRUpdateResource) GetObservation() *Observation {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Observation); ok {
		return x.Observation
	}
	return nil
}

func (m *FHIRUpdateResource) GetDiagnosticReport() *DiagnosticReport {
	if x, ok := m.GetResource().(*FHIRUpdateResource_DiagnosticReport); ok {
		return x.DiagnosticReport
	}
	return nil
}

func (m *FHIRUpdateResource) GetImmunication() *Immunization {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Immunication); ok {
		return x.Immunication
	}
	return nil
}

func (m *FHIRUpdateResource) GetCarePlan() *CarePlan {
	if x, ok := m.GetResource().(*FHIRUpdateResource_CarePlan); ok {
		return x.CarePlan
	}
	return nil
}

func (m *FHIRUpdateResource) GetGoal() *Goal {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Goal); ok {
		return x.Goal
	}
	return nil
}

func (m *FHIRUpdateResource) GetOrganization() *OrganizationData {
	if x, ok := m.GetResource().(*FHIRUpdateResource_Organization); ok {
		return x.Organization
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FHIRUpdateResource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FHIRUpdateResource_OneofMarshaler, _FHIRUpdateResource_OneofUnmarshaler, _FHIRUpdateResource_OneofSizer, []interface{}{
		(*FHIRUpdateResource_Patient)(nil),
		(*FHIRUpdateResource_Provider)(nil),
		(*FHIRUpdateResource_AllergyIntolerance)(nil),
		(*FHIRUpdateResource_Encounter)(nil),
		(*FHIRUpdateResource_Condition)(nil),
		(*FHIRUpdateResource_Procedure)(nil),
		(*FHIRUpdateResource_MedicationRequest)(nil),
		(*FHIRUpdateResource_Observation)(nil),
		(*FHIRUpdateResource_DiagnosticReport)(nil),
		(*FHIRUpdateResource_Immunication)(nil),
		(*FHIRUpdateResource_CarePlan)(nil),
		(*FHIRUpdateResource_Goal)(nil),
		(*FHIRUpdateResource_Organization)(nil),
	}
}

func _FHIRUpdateResource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FHIRUpdateResource)
	// resource
	switch x := m.Resource.(type) {
	case *FHIRUpdateResource_Patient:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Patient); err != nil {
			return err
		}
	case *FHIRUpdateResource_Provider:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Provider); err != nil {
			return err
		}
	case *FHIRUpdateResource_AllergyIntolerance:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllergyIntolerance); err != nil {
			return err
		}
	case *FHIRUpdateResource_Encounter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Encounter); err != nil {
			return err
		}
	case *FHIRUpdateResource_Condition:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Condition); err != nil {
			return err
		}
	case *FHIRUpdateResource_Procedure:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Procedure); err != nil {
			return err
		}
	case *FHIRUpdateResource_MedicationRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MedicationRequest); err != nil {
			return err
		}
	case *FHIRUpdateResource_Observation:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Observation); err != nil {
			return err
		}
	case *FHIRUpdateResource_DiagnosticReport:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DiagnosticReport); err != nil {
			return err
		}
	case *FHIRUpdateResource_Immunication:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Immunication); err != nil {
			return err
		}
	case *FHIRUpdateResource_CarePlan:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarePlan); err != nil {
			return err
		}
	case *FHIRUpdateResource_Goal:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Goal); err != nil {
			return err
		}
	case *FHIRUpdateResource_Organization:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Organization); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FHIRUpdateResource.Resource has unexpected type %T", x)
	}
	return nil
}

func _FHIRUpdateResource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FHIRUpdateResource)
	switch tag {
	case 1: // resource.patient
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatientData)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Patient{msg}
		return true, err
	case 2: // resource.provider
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PractitionerData)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Provider{msg}
		return true, err
	case 3: // resource.allergy_intolerance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AllergyIntolerance)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_AllergyIntolerance{msg}
		return true, err
	case 4: // resource.encounter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Encounter)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Encounter{msg}
		return true, err
	case 5: // resource.condition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConditionData)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Condition{msg}
		return true, err
	case 6: // resource.procedure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Procedure)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Procedure{msg}
		return true, err
	case 7: // resource.medication_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MedicationRequest)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_MedicationRequest{msg}
		return true, err
	case 8: // resource.observation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Observation)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Observation{msg}
		return true, err
	case 9: // resource.diagnostic_report
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DiagnosticReport)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_DiagnosticReport{msg}
		return true, err
	case 10: // resource.immunication
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Immunization)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Immunication{msg}
		return true, err
	case 11: // resource.care_plan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CarePlan)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_CarePlan{msg}
		return true, err
	case 12: // resource.goal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Goal)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Goal{msg}
		return true, err
	case 13: // resource.organization
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrganizationData)
		err := b.DecodeMessage(msg)
		m.Resource = &FHIRUpdateResource_Organization{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FHIRUpdateResource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FHIRUpdateResource)
	// resource
	switch x := m.Resource.(type) {
	case *FHIRUpdateResource_Patient:
		s := proto.Size(x.Patient)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Provider:
		s := proto.Size(x.Provider)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_AllergyIntolerance:
		s := proto.Size(x.AllergyIntolerance)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Encounter:
		s := proto.Size(x.Encounter)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Condition:
		s := proto.Size(x.Condition)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Procedure:
		s := proto.Size(x.Procedure)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_MedicationRequest:
		s := proto.Size(x.MedicationRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Observation:
		s := proto.Size(x.Observation)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_DiagnosticReport:
		s := proto.Size(x.DiagnosticReport)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Immunication:
		s := proto.Size(x.Immunication)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_CarePlan:
		s := proto.Size(x.CarePlan)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Goal:
		s := proto.Size(x.Goal)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FHIRUpdateResource_Organization:
		s := proto.Size(x.Organization)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ID)(nil), "buffer.ID")
	proto.RegisterType((*QueryString)(nil), "buffer.QueryString")
	proto.RegisterType((*FHIRUpdateResource)(nil), "buffer.FHIRUpdateResource")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FHIR service

type FHIRClient interface {
	GetResource(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FHIRUpdateResource, error)
	CreateResource(ctx context.Context, in *FHIRUpdateResource, opts ...grpc.CallOption) (*FHIRUpdateResource, error)
	UpdateResource(ctx context.Context, in *FHIRUpdateResource, opts ...grpc.CallOption) (*FHIRUpdateResource, error)
	DeleteResource(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FHIRUpdateResource, error)
	SearchResource(ctx context.Context, in *QueryString, opts ...grpc.CallOption) (*Bundle, error)
	BatchInsertResource(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error)
}

type fHIRClient struct {
	cc *grpc.ClientConn
}

func NewFHIRClient(cc *grpc.ClientConn) FHIRClient {
	return &fHIRClient{cc}
}

func (c *fHIRClient) GetResource(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FHIRUpdateResource, error) {
	out := new(FHIRUpdateResource)
	err := grpc.Invoke(ctx, "/buffer.FHIR/GetResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHIRClient) CreateResource(ctx context.Context, in *FHIRUpdateResource, opts ...grpc.CallOption) (*FHIRUpdateResource, error) {
	out := new(FHIRUpdateResource)
	err := grpc.Invoke(ctx, "/buffer.FHIR/CreateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHIRClient) UpdateResource(ctx context.Context, in *FHIRUpdateResource, opts ...grpc.CallOption) (*FHIRUpdateResource, error) {
	out := new(FHIRUpdateResource)
	err := grpc.Invoke(ctx, "/buffer.FHIR/UpdateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHIRClient) DeleteResource(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FHIRUpdateResource, error) {
	out := new(FHIRUpdateResource)
	err := grpc.Invoke(ctx, "/buffer.FHIR/DeleteResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHIRClient) SearchResource(ctx context.Context, in *QueryString, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/buffer.FHIR/SearchResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHIRClient) BatchInsertResource(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/buffer.FHIR/BatchInsertResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FHIR service

type FHIRServer interface {
	GetResource(context.Context, *ID) (*FHIRUpdateResource, error)
	CreateResource(context.Context, *FHIRUpdateResource) (*FHIRUpdateResource, error)
	UpdateResource(context.Context, *FHIRUpdateResource) (*FHIRUpdateResource, error)
	DeleteResource(context.Context, *ID) (*FHIRUpdateResource, error)
	SearchResource(context.Context, *QueryString) (*Bundle, error)
	BatchInsertResource(context.Context, *Bundle) (*Bundle, error)
}

func RegisterFHIRServer(s *grpc.Server, srv FHIRServer) {
	s.RegisterService(&_FHIR_serviceDesc, srv)
}

func _FHIR_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).GetResource(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHIR_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FHIRUpdateResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).CreateResource(ctx, req.(*FHIRUpdateResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHIR_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FHIRUpdateResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).UpdateResource(ctx, req.(*FHIRUpdateResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHIR_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).DeleteResource(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHIR_SearchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).SearchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/SearchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).SearchResource(ctx, req.(*QueryString))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHIR_BatchInsertResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHIRServer).BatchInsertResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffer.FHIR/BatchInsertResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHIRServer).BatchInsertResource(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

var _FHIR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buffer.FHIR",
	HandlerType: (*FHIRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResource",
			Handler:    _FHIR_GetResource_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _FHIR_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _FHIR_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _FHIR_DeleteResource_Handler,
		},
		{
			MethodName: "SearchResource",
			Handler:    _FHIR_SearchResource_Handler,
		},
		{
			MethodName: "BatchInsertResource",
			Handler:    _FHIR_BatchInsertResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fhirServer.proto",
}

func init() { proto.RegisterFile("fhirServer.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x5f, 0x4f, 0xdb, 0x30,
	0x14, 0xc5, 0x43, 0x29, 0xa5, 0xbd, 0x2d, 0x85, 0x1a, 0xb6, 0x79, 0x7d, 0x42, 0xdd, 0x0b, 0x4f,
	0xa0, 0x75, 0x7f, 0x90, 0x78, 0x98, 0x34, 0xe8, 0x46, 0x8a, 0x84, 0x60, 0x46, 0x7b, 0xae, 0xdc,
	0xe4, 0xb6, 0x58, 0x4a, 0xe3, 0xe0, 0x3a, 0x48, 0xdd, 0xfb, 0xbe, 0xdc, 0x3e, 0xd5, 0x14, 0x37,
	0x76, 0xd3, 0x54, 0xda, 0xa6, 0xbd, 0x25, 0xbe, 0xbf, 0x73, 0xed, 0xe4, 0x9e, 0x63, 0x38, 0x98,
	0x3c, 0x0a, 0xf5, 0x80, 0xea, 0x19, 0xd5, 0x69, 0xa2, 0xa4, 0x96, 0xa4, 0x36, 0x4e, 0x27, 0x13,
	0x54, 0xdd, 0xbd, 0x84, 0x6b, 0x81, 0xb1, 0x5e, 0x2e, 0x77, 0x49, 0xa2, 0x78, 0xa0, 0x85, 0x16,
	0x32, 0xb6, 0x68, 0x97, 0xf2, 0x28, 0x42, 0x35, 0x5d, 0x0c, 0x63, 0x2d, 0x23, 0x54, 0x3c, 0x0e,
	0x30, 0xaf, 0xec, 0x63, 0x1c, 0xc8, 0x34, 0xd6, 0x0e, 0xdd, 0x0f, 0x64, 0x1c, 0x1a, 0xb5, 0x5d,
	0x48, 0x94, 0x0c, 0x30, 0x4c, 0x95, 0x95, 0xbc, 0x9a, 0x61, 0x28, 0x02, 0x9e, 0x21, 0x0c, 0x9f,
	0x52, 0x9c, 0xdb, 0x9d, 0x3b, 0x72, 0x3c, 0x47, 0xf5, 0xcc, 0x0b, 0xe2, 0x97, 0xa1, 0xe0, 0xd3,
	0x58, 0xce, 0xb5, 0x08, 0x18, 0x26, 0x52, 0xb9, 0x43, 0x8a, 0xd9, 0x2c, 0x8d, 0xc5, 0x8f, 0x22,
	0xdb, 0x0e, 0xb8, 0xc2, 0x24, 0xe2, 0xf6, 0x1d, 0xa6, 0x92, 0x47, 0x96, 0x97, 0x6a, 0xca, 0x4b,
	0x7c, 0x6b, 0x9c, 0xc6, 0x61, 0x94, 0x9f, 0xaa, 0x77, 0x02, 0x95, 0xe1, 0x80, 0xb4, 0xa1, 0x22,
	0x42, 0xba, 0x75, 0xbc, 0x75, 0xd2, 0x60, 0x15, 0x11, 0x12, 0x02, 0x55, 0xbd, 0x48, 0x90, 0x56,
	0xcc, 0x8a, 0x79, 0xee, 0xbd, 0x81, 0xe6, 0xb7, 0x14, 0xd5, 0xe2, 0x41, 0x2b, 0x11, 0x4f, 0xc9,
	0x11, 0xec, 0x3c, 0x65, 0xaf, 0xb9, 0x6a, 0xf9, 0xd2, 0xfb, 0x55, 0x03, 0xf2, 0xd5, 0x1f, 0xb2,
	0xef, 0x49, 0xc8, 0x35, 0x32, 0x9c, 0xcb, 0x54, 0x05, 0x48, 0xde, 0xc3, 0xfe, 0x7c, 0xa1, 0x71,
	0x36, 0x0c, 0x31, 0xd6, 0x62, 0x22, 0x50, 0xd1, 0xf6, 0xf1, 0xd6, 0x49, 0xb3, 0x0f, 0xa7, 0xcb,
	0x69, 0x9c, 0x0e, 0x07, 0xac, 0x8c, 0x90, 0x33, 0xd8, 0xcd, 0x67, 0x64, 0x36, 0x69, 0xf6, 0x0f,
	0x2d, 0x7d, 0xbf, 0x5c, 0x1e, 0x70, 0xcd, 0x7d, 0x8f, 0x59, 0x8a, 0x7c, 0x84, 0x7a, 0xa2, 0xe4,
	0xb3, 0x08, 0x51, 0x99, 0xa3, 0x37, 0xfb, 0xd4, 0x29, 0x0a, 0xd3, 0xcd, 0x65, 0x8e, 0x25, 0xb7,
	0x70, 0x98, 0x4f, 0x7a, 0x24, 0x56, 0xa3, 0xa6, 0xdb, 0xa6, 0x45, 0xd7, 0xb6, 0xf8, 0xbc, 0x61,
	0x06, 0xdf, 0x63, 0x64, 0xd3, 0x22, 0xe4, 0x2d, 0x34, 0x9c, 0x3d, 0x68, 0xd5, 0x34, 0xe9, 0xd8,
	0x26, 0x5f, 0x6c, 0xc1, 0xf7, 0xd8, 0x8a, 0x22, 0x1f, 0xa0, 0xe1, 0x0c, 0x44, 0x77, 0x8c, 0xe4,
	0x85, 0x95, 0x5c, 0xd9, 0x42, 0x7e, 0xee, 0x15, 0x99, 0xed, 0xe4, 0x6c, 0x46, 0x6b, 0xeb, 0x3b,
	0xdd, 0xdb, 0x42, 0x26, 0x71, 0x14, 0xb9, 0x01, 0xb2, 0x32, 0xe2, 0x48, 0x2d, 0x9d, 0x48, 0x77,
	0x8d, 0xf6, 0xb5, 0xd5, 0xde, 0x96, 0xad, 0xea, 0x7b, 0xac, 0xb3, 0xe1, 0x5f, 0x72, 0x0e, 0xcd,
	0x82, 0x77, 0x69, 0x7d, 0x7d, 0x48, 0x77, 0xab, 0x92, 0xef, 0xb1, 0x22, 0x49, 0xae, 0xa1, 0xb3,
	0x72, 0xf8, 0x48, 0x19, 0x8b, 0xd3, 0xc6, 0xfa, 0xc4, 0x06, 0xa5, 0x08, 0xf8, 0x1e, 0x3b, 0x28,
	0xc7, 0x82, 0x5c, 0x40, 0x6b, 0x19, 0x89, 0xe5, 0xc1, 0x28, 0x98, 0x1e, 0x47, 0xce, 0x55, 0x85,
	0xb8, 0xf8, 0x1e, 0x5b, 0x63, 0xc9, 0x19, 0x34, 0xb2, 0xe8, 0x8c, 0xb2, 0xec, 0xd0, 0xa6, 0x11,
	0x1e, 0xb8, 0x7f, 0xce, 0x15, 0xde, 0x47, 0x3c, 0x13, 0xd5, 0x83, 0xfc, 0x99, 0xf4, 0xa0, 0x9a,
	0x65, 0x8b, 0xb6, 0x0c, 0xdb, 0xb2, 0xec, 0xb5, 0xe4, 0x91, 0xef, 0x31, 0x53, 0x23, 0x9f, 0xa0,
	0x55, 0xcc, 0x1c, 0xdd, 0x5b, 0xff, 0xa8, 0xbb, 0x42, 0x2d, 0x1f, 0xe7, 0x1a, 0x7f, 0x09, 0x50,
	0x57, 0x79, 0x6a, 0xfa, 0x3f, 0xb7, 0xa1, 0x9a, 0x85, 0x29, 0xfb, 0xcf, 0xd7, 0xa8, 0x5d, 0x9a,
	0x0a, 0xa1, 0xe9, 0x3a, 0x77, 0x6e, 0xa6, 0xae, 0xe7, 0x91, 0x1b, 0x68, 0x5f, 0x29, 0x2c, 0x26,
	0xf1, 0x0f, 0xfc, 0xdf, 0x7b, 0x95, 0x52, 0xfd, 0xff, 0xbd, 0x2e, 0xa0, 0x3d, 0xc0, 0x08, 0x0b,
	0xbd, 0xfe, 0xfd, 0x9b, 0xce, 0xa1, 0xfd, 0x80, 0x5c, 0x05, 0x8f, 0x4e, 0xeb, 0x1c, 0x57, 0xb8,
	0x9f, 0xba, 0x6d, 0xbb, 0x78, 0x69, 0xae, 0x3b, 0x23, 0x3c, 0xbc, 0xe4, 0x3a, 0x78, 0x1c, 0xc6,
	0x73, 0x54, 0xab, 0xbf, 0x59, 0x02, 0x37, 0x85, 0xe3, 0x9a, 0xb9, 0x2a, 0xdf, 0xfd, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0xed, 0x27, 0x8b, 0x4c, 0x06, 0x00, 0x00,
}
