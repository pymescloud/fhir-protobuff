// Code generated by protoc-gen-go. DO NOT EDIT.
// source: condition.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConditionData struct {
	Category           []*Category `protobuf:"bytes,1,rep,name=category" json:"category,omitempty"`
	AssertedDate       string      `protobuf:"bytes,2,opt,name=assertedDate" json:"assertedDate,omitempty"`
	Code               *Code       `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	Evidence           []*Evidence `protobuf:"bytes,4,rep,name=evidence" json:"evidence,omitempty"`
	Severity           *Severity   `protobuf:"bytes,5,opt,name=severity" json:"severity,omitempty"`
	ResourceType       string      `protobuf:"bytes,6,opt,name=resourceType" json:"resourceType,omitempty"`
	Text               *Text       `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
	OnsetDateTime      string      `protobuf:"bytes,8,opt,name=onsetDateTime" json:"onsetDateTime,omitempty"`
	Id                 string      `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Asserter           *Asserter   `protobuf:"bytes,10,opt,name=asserter" json:"asserter,omitempty"`
	BodySite           []*BodySite `protobuf:"bytes,11,rep,name=bodySite" json:"bodySite,omitempty"`
	Context            *Context    `protobuf:"bytes,12,opt,name=context" json:"context,omitempty"`
	ClinicalStatus     string      `protobuf:"bytes,13,opt,name=clinicalStatus" json:"clinicalStatus,omitempty"`
	VerificationStatus string      `protobuf:"bytes,14,opt,name=verificationStatus" json:"verificationStatus,omitempty"`
	Stage              *Stage      `protobuf:"bytes,15,opt,name=stage" json:"stage,omitempty"`
	Subject            *Subject    `protobuf:"bytes,16,opt,name=subject" json:"subject,omitempty"`
	Meta               *Meta       `protobuf:"bytes,17,opt,name=meta" json:"meta,omitempty"`
}

func (m *ConditionData) Reset()                    { *m = ConditionData{} }
func (m *ConditionData) String() string            { return proto.CompactTextString(m) }
func (*ConditionData) ProtoMessage()               {}
func (*ConditionData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ConditionData) GetCategory() []*Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ConditionData) GetAssertedDate() string {
	if m != nil {
		return m.AssertedDate
	}
	return ""
}

func (m *ConditionData) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ConditionData) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *ConditionData) GetSeverity() *Severity {
	if m != nil {
		return m.Severity
	}
	return nil
}

func (m *ConditionData) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ConditionData) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *ConditionData) GetOnsetDateTime() string {
	if m != nil {
		return m.OnsetDateTime
	}
	return ""
}

func (m *ConditionData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConditionData) GetAsserter() *Asserter {
	if m != nil {
		return m.Asserter
	}
	return nil
}

func (m *ConditionData) GetBodySite() []*BodySite {
	if m != nil {
		return m.BodySite
	}
	return nil
}

func (m *ConditionData) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ConditionData) GetClinicalStatus() string {
	if m != nil {
		return m.ClinicalStatus
	}
	return ""
}

func (m *ConditionData) GetVerificationStatus() string {
	if m != nil {
		return m.VerificationStatus
	}
	return ""
}

func (m *ConditionData) GetStage() *Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *ConditionData) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ConditionData) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*ConditionData)(nil), "buffer.ConditionData")
}

func init() { proto.RegisterFile("condition.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xd5, 0xce, 0xb4, 0x33, 0xe3, 0x26, 0xed, 0xe0, 0x95, 0xc5, 0x2a, 0x1a, 0x10, 0x2a,
	0x12, 0xca, 0x62, 0x38, 0x01, 0xb4, 0x2c, 0xd9, 0x38, 0xbd, 0x80, 0x63, 0xbf, 0x56, 0x46, 0x4d,
	0x5c, 0xd9, 0x2f, 0x55, 0x73, 0x27, 0x0e, 0x89, 0xec, 0x24, 0x06, 0xa3, 0xd9, 0x7e, 0xff, 0x9f,
	0xe7, 0x2f, 0xcf, 0x26, 0x1b, 0x69, 0x5a, 0xa5, 0x51, 0x9b, 0xb6, 0xbc, 0x58, 0x83, 0x86, 0x2e,
	0xeb, 0xee, 0x78, 0x04, 0xfb, 0x3e, 0x93, 0xa6, 0x69, 0x26, 0xfa, 0xf2, 0x7b, 0x41, 0xf2, 0xdd,
	0xd4, 0xdc, 0x0b, 0x14, 0xf4, 0x0b, 0x79, 0x94, 0x02, 0xe1, 0x64, 0x6c, 0xcf, 0x66, 0xc5, 0xdd,
	0x76, 0xf5, 0xfa, 0x5c, 0x0e, 0x9f, 0x96, 0xbb, 0x91, 0xf3, 0xd8, 0xa0, 0x2f, 0x24, 0x13, 0xce,
	0x81, 0x45, 0x50, 0x7b, 0x81, 0xc0, 0xe6, 0xc5, 0x6c, 0xfb, 0xc4, 0x13, 0x46, 0x0b, 0x72, 0x2f,
	0x8d, 0x02, 0x76, 0x57, 0xcc, 0xb6, 0xab, 0xd7, 0x2c, 0x4e, 0x33, 0x0a, 0x78, 0x48, 0xfc, 0x99,
	0x70, 0xd5, 0x0a, 0x5a, 0x09, 0xec, 0x3e, 0x3d, 0xf3, 0xc7, 0xc8, 0x79, 0x6c, 0xf8, 0xb6, 0x83,
	0x2b, 0x58, 0x8d, 0x3d, 0x5b, 0x84, 0x99, 0xb1, 0x5d, 0x8d, 0x9c, 0xc7, 0x86, 0x37, 0xb4, 0xe0,
	0x4c, 0x67, 0x25, 0x1c, 0xfa, 0x0b, 0xb0, 0xe5, 0x60, 0xf8, 0x2f, 0xf3, 0x86, 0x08, 0x37, 0x64,
	0x0f, 0xa9, 0xe1, 0x01, 0x6e, 0xc8, 0x43, 0x42, 0x3f, 0x92, 0xdc, 0xb4, 0x0e, 0xd0, 0xff, 0xd0,
	0x41, 0x37, 0xc0, 0x1e, 0xc3, 0x98, 0x14, 0xd2, 0x35, 0x99, 0x6b, 0xc5, 0x9e, 0x42, 0x34, 0xd7,
	0xca, 0x9b, 0x8e, 0x9b, 0xb0, 0x8c, 0xa4, 0xa6, 0xdf, 0x46, 0xce, 0x63, 0xc3, 0xb7, 0x6b, 0xa3,
	0xfa, 0x4a, 0x23, 0xb0, 0x55, 0xba, 0x85, 0xef, 0x23, 0xe7, 0xb1, 0x41, 0x3f, 0x93, 0x07, 0x69,
	0xda, 0xa0, 0x9d, 0x85, 0xd1, 0x9b, 0xbf, 0x8b, 0x0d, 0x98, 0x4f, 0x39, 0xfd, 0x44, 0xd6, 0xf2,
	0xac, 0x5b, 0x2d, 0xc5, 0xb9, 0x42, 0x81, 0x9d, 0x63, 0x79, 0x50, 0xfc, 0x8f, 0xd2, 0x92, 0x50,
	0xbf, 0xb4, 0xa3, 0x96, 0xc2, 0x3f, 0x87, 0xb1, 0xbb, 0x0e, 0xdd, 0x37, 0x12, 0xfa, 0x81, 0x2c,
	0x1c, 0x8a, 0x13, 0xb0, 0x4d, 0x10, 0xc8, 0xe3, 0x2d, 0x78, 0xc8, 0x87, 0xcc, 0x7b, 0xba, 0xae,
	0xfe, 0x05, 0x12, 0xd9, 0x73, 0xea, 0x59, 0x0d, 0x98, 0x4f, 0xb9, 0xbf, 0x86, 0x06, 0x50, 0xb0,
	0x77, 0xe9, 0x35, 0xfc, 0x04, 0x14, 0x3c, 0x24, 0xf5, 0x32, 0xbc, 0xda, 0xaf, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xb2, 0x5c, 0x9f, 0x81, 0xde, 0x02, 0x00, 0x00,
}
