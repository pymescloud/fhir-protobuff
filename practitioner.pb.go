// Code generated by protoc-gen-go. DO NOT EDIT.
// source: practitioner.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PractitionerData struct {
	Gender        string           `protobuf:"bytes,1,opt,name=gender" json:"gender,omitempty"`
	Photo         []*Photo         `protobuf:"bytes,2,rep,name=photo" json:"photo,omitempty"`
	Name          []*Name          `protobuf:"bytes,3,rep,name=name" json:"name,omitempty"`
	ResourceType  string           `protobuf:"bytes,4,opt,name=resourceType" json:"resourceType,omitempty"`
	Text          *Text            `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	Communication []*Communication `protobuf:"bytes,6,rep,name=communication" json:"communication,omitempty"`
	BirthDate     string           `protobuf:"bytes,7,opt,name=birthDate" json:"birthDate,omitempty"`
	Telecom       []*Telecom       `protobuf:"bytes,8,rep,name=telecom" json:"telecom,omitempty"`
	Address       []*Address       `protobuf:"bytes,9,rep,name=address" json:"address,omitempty"`
	Identifier    []*Identifier    `protobuf:"bytes,10,rep,name=identifier" json:"identifier,omitempty"`
	Id            string           `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`
	Meta          *Meta            `protobuf:"bytes,12,opt,name=meta" json:"meta,omitempty"`
}

func (m *PractitionerData) Reset()                    { *m = PractitionerData{} }
func (m *PractitionerData) String() string            { return proto.CompactTextString(m) }
func (*PractitionerData) ProtoMessage()               {}
func (*PractitionerData) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *PractitionerData) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *PractitionerData) GetPhoto() []*Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PractitionerData) GetName() []*Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PractitionerData) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *PractitionerData) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *PractitionerData) GetCommunication() []*Communication {
	if m != nil {
		return m.Communication
	}
	return nil
}

func (m *PractitionerData) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *PractitionerData) GetTelecom() []*Telecom {
	if m != nil {
		return m.Telecom
	}
	return nil
}

func (m *PractitionerData) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PractitionerData) GetIdentifier() []*Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *PractitionerData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PractitionerData) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Photo struct {
	ContentType string `protobuf:"bytes,1,opt,name=contentType" json:"contentType,omitempty"`
	Data        string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *Photo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Photo) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*PractitionerData)(nil), "buffer.PractitionerData")
	proto.RegisterType((*Photo)(nil), "buffer.Photo")
}

func init() { proto.RegisterFile("practitioner.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xc7, 0x43, 0x81, 0xf2, 0x18, 0xca, 0x7b, 0x2f, 0x93, 0x68, 0x36, 0xc6, 0x43, 0x83, 0x17,
	0xbc, 0x70, 0xc0, 0xa3, 0xf1, 0x60, 0xe4, 0xe2, 0x41, 0x43, 0x36, 0x7c, 0x81, 0xa5, 0x1d, 0x64,
	0x13, 0xbb, 0xdb, 0x2c, 0x43, 0x82, 0x5f, 0xd2, 0xcf, 0x64, 0x3a, 0xa5, 0xd2, 0xde, 0xda, 0xff,
	0xef, 0x97, 0xf9, 0x6f, 0x67, 0x0b, 0x58, 0x06, 0x93, 0xb1, 0x65, 0xeb, 0x1d, 0x85, 0x45, 0x19,
	0x3c, 0x7b, 0x8c, 0xb7, 0xc7, 0xdd, 0x8e, 0xc2, 0x4d, 0x92, 0xf9, 0xa2, 0xf0, 0xae, 0x4e, 0x67,
	0xdf, 0x7d, 0xf8, 0xbf, 0x6e, 0xc9, 0x2b, 0xc3, 0x06, 0xaf, 0x21, 0xfe, 0x20, 0x97, 0x53, 0x50,
	0xbd, 0xb4, 0x37, 0x1f, 0xeb, 0xf3, 0x1b, 0xde, 0xc1, 0xb0, 0xdc, 0x7b, 0xf6, 0x2a, 0x4a, 0xfb,
	0xf3, 0xc9, 0x72, 0xba, 0xa8, 0x47, 0x2e, 0xd6, 0x55, 0xa8, 0x6b, 0x86, 0x29, 0x0c, 0x9c, 0x29,
	0x48, 0xf5, 0xc5, 0x49, 0x1a, 0xe7, 0xdd, 0x14, 0xa4, 0x85, 0xe0, 0x0c, 0x92, 0x40, 0x07, 0x7f,
	0x0c, 0x19, 0x6d, 0xbe, 0x4a, 0x52, 0x03, 0x29, 0xe9, 0x64, 0xd5, 0x14, 0xa6, 0x13, 0xab, 0x61,
	0xda, 0x6b, 0x4f, 0xd9, 0xd0, 0x89, 0xb5, 0x10, 0x7c, 0x84, 0x69, 0xf5, 0x25, 0x47, 0x67, 0x33,
	0x53, 0x9d, 0x5d, 0xc5, 0x52, 0x78, 0xd5, 0xa8, 0x2f, 0x6d, 0xa8, 0xbb, 0x2e, 0xde, 0xc2, 0x78,
	0x6b, 0x03, 0xef, 0x57, 0x86, 0x49, 0x8d, 0xa4, 0xff, 0x12, 0xe0, 0x3d, 0x8c, 0x98, 0x3e, 0x29,
	0xf3, 0x85, 0xfa, 0x23, 0x43, 0xff, 0x5d, 0xfa, 0x25, 0xd6, 0x0d, 0xaf, 0x54, 0x93, 0xe7, 0x81,
	0x0e, 0x07, 0x35, 0xee, 0xaa, 0xcf, 0x75, 0xac, 0x1b, 0x8e, 0x4b, 0x00, 0x9b, 0x93, 0x63, 0xbb,
	0xb3, 0x14, 0x14, 0x88, 0x8d, 0x8d, 0xfd, 0xfa, 0x4b, 0x74, 0xcb, 0xc2, 0xbf, 0x10, 0xd9, 0x5c,
	0x4d, 0xe4, 0x80, 0x91, 0xcd, 0xab, 0xb5, 0x14, 0xc4, 0x46, 0x25, 0xdd, 0xb5, 0xbc, 0x11, 0x1b,
	0x2d, 0x64, 0xf6, 0x04, 0xc3, 0xf5, 0xf9, 0x1e, 0x26, 0x99, 0x77, 0x4c, 0x8e, 0x65, 0xc9, 0xf5,
	0x4d, 0xb6, 0x23, 0x44, 0x18, 0xe4, 0x86, 0x8d, 0x8a, 0x04, 0xc9, 0xf3, 0x36, 0x96, 0xdf, 0xe2,
	0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x20, 0xf5, 0x08, 0x6f, 0x42, 0x02, 0x00, 0x00,
}
