// Code generated by protoc-gen-go. DO NOT EDIT.
// source: immunization.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Immunization struct {
	Status        string         `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Patient       *Patient       `protobuf:"bytes,2,opt,name=patient" json:"patient,omitempty"`
	NotGiven      bool           `protobuf:"varint,3,opt,name=notGiven" json:"notGiven,omitempty"`
	ResourceType  string         `protobuf:"bytes,4,opt,name=resourceType" json:"resourceType,omitempty"`
	VaccineCode   *VaccineCode   `protobuf:"bytes,5,opt,name=vaccineCode" json:"vaccineCode,omitempty"`
	Meta          *Meta          `protobuf:"bytes,6,opt,name=meta" json:"meta,omitempty"`
	Date          string         `protobuf:"bytes,7,opt,name=date" json:"date,omitempty"`
	PrimarySource bool           `protobuf:"varint,8,opt,name=primarySource" json:"primarySource,omitempty"`
	Encounter     *ImmuEncounter `protobuf:"bytes,9,opt,name=encounter" json:"encounter,omitempty"`
	Id            string         `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"`
}

func (m *Immunization) Reset()                    { *m = Immunization{} }
func (m *Immunization) String() string            { return proto.CompactTextString(m) }
func (*Immunization) ProtoMessage()               {}
func (*Immunization) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *Immunization) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Immunization) GetPatient() *Patient {
	if m != nil {
		return m.Patient
	}
	return nil
}

func (m *Immunization) GetNotGiven() bool {
	if m != nil {
		return m.NotGiven
	}
	return false
}

func (m *Immunization) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *Immunization) GetVaccineCode() *VaccineCode {
	if m != nil {
		return m.VaccineCode
	}
	return nil
}

func (m *Immunization) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Immunization) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Immunization) GetPrimarySource() bool {
	if m != nil {
		return m.PrimarySource
	}
	return false
}

func (m *Immunization) GetEncounter() *ImmuEncounter {
	if m != nil {
		return m.Encounter
	}
	return nil
}

func (m *Immunization) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ImmuEncounter struct {
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
}

func (m *ImmuEncounter) Reset()                    { *m = ImmuEncounter{} }
func (m *ImmuEncounter) String() string            { return proto.CompactTextString(m) }
func (*ImmuEncounter) ProtoMessage()               {}
func (*ImmuEncounter) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *ImmuEncounter) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

type VaccineCode struct {
	Text   string    `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Coding []*Coding `protobuf:"bytes,2,rep,name=coding" json:"coding,omitempty"`
}

func (m *VaccineCode) Reset()                    { *m = VaccineCode{} }
func (m *VaccineCode) String() string            { return proto.CompactTextString(m) }
func (*VaccineCode) ProtoMessage()               {}
func (*VaccineCode) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *VaccineCode) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *VaccineCode) GetCoding() []*Coding {
	if m != nil {
		return m.Coding
	}
	return nil
}

func init() {
	proto.RegisterType((*Immunization)(nil), "buffer.Immunization")
	proto.RegisterType((*ImmuEncounter)(nil), "buffer.ImmuEncounter")
	proto.RegisterType((*VaccineCode)(nil), "buffer.VaccineCode")
}

func init() { proto.RegisterFile("immunization.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x5a, 0xd3, 0x66, 0x92, 0x56, 0x18, 0x51, 0x96, 0xe2, 0x21, 0x04, 0x91, 0x78,
	0xb0, 0x87, 0x16, 0x7f, 0x41, 0x11, 0xe9, 0x41, 0x90, 0x28, 0xde, 0xb7, 0x9b, 0xa9, 0xec, 0x21,
	0xbb, 0x61, 0xbb, 0x29, 0xd6, 0x7f, 0xec, 0xbf, 0x90, 0x6e, 0xb3, 0xb6, 0xbd, 0xcd, 0xbc, 0xf7,
	0xc8, 0xf7, 0x32, 0x0b, 0x28, 0xeb, 0xba, 0x55, 0xf2, 0x87, 0x5b, 0xa9, 0xd5, 0xb4, 0x31, 0xda,
	0x6a, 0x8c, 0x56, 0xed, 0x7a, 0x4d, 0x66, 0x92, 0x0a, 0x5d, 0xd7, 0x5e, 0xcd, 0x7f, 0x43, 0x48,
	0x97, 0x27, 0x61, 0xbc, 0x81, 0x68, 0x63, 0xb9, 0x6d, 0x37, 0x2c, 0xc8, 0x82, 0x22, 0x2e, 0xbb,
	0x0d, 0x1f, 0x60, 0xd0, 0x70, 0x2b, 0x49, 0x59, 0x16, 0x66, 0x41, 0x91, 0xcc, 0x2e, 0xa7, 0x87,
	0x0f, 0x4e, 0xdf, 0x0e, 0x72, 0xe9, 0x7d, 0x9c, 0xc0, 0x50, 0x69, 0xfb, 0x22, 0xb7, 0xa4, 0x58,
	0x2f, 0x0b, 0x8a, 0x61, 0xf9, 0xbf, 0x63, 0x0e, 0xa9, 0xa1, 0x8d, 0x6e, 0x8d, 0xa0, 0x8f, 0x5d,
	0x43, 0xac, 0xef, 0x20, 0x67, 0x1a, 0x3e, 0x41, 0xb2, 0xe5, 0x42, 0x48, 0x45, 0x0b, 0x5d, 0x11,
	0xbb, 0x70, 0xb8, 0x2b, 0x8f, 0xfb, 0x3c, 0x5a, 0xe5, 0x69, 0x0e, 0x33, 0xe8, 0xd7, 0x64, 0x39,
	0x8b, 0x5c, 0x3e, 0xf5, 0xf9, 0x57, 0xb2, 0xbc, 0x74, 0x0e, 0x22, 0xf4, 0x2b, 0x6e, 0x89, 0x0d,
	0x1c, 0xd4, 0xcd, 0x78, 0x07, 0xa3, 0xc6, 0xc8, 0x9a, 0x9b, 0xdd, 0xbb, 0x6b, 0xc0, 0x86, 0xae,
	0xf1, 0xb9, 0x88, 0x73, 0x88, 0x49, 0x09, 0xdd, 0x2a, 0x4b, 0x86, 0xc5, 0x0e, 0x70, 0xed, 0x01,
	0xfb, 0xf3, 0x3d, 0x7b, 0xb3, 0x3c, 0xe6, 0x70, 0x0c, 0xa1, 0xac, 0x18, 0x38, 0x58, 0x28, 0xab,
	0xfc, 0x11, 0x46, 0x67, 0x59, 0xbc, 0x85, 0xd8, 0xd0, 0x9a, 0x0c, 0x29, 0x41, 0xdd, 0xb9, 0x8f,
	0x42, 0xbe, 0x84, 0xe4, 0xe4, 0x5f, 0xf7, 0xe5, 0x2d, 0x7d, 0xdb, 0x2e, 0xe7, 0x66, 0xbc, 0x87,
	0x48, 0xe8, 0x4a, 0xaa, 0x2f, 0x16, 0x66, 0xbd, 0x22, 0x99, 0x8d, 0x7d, 0xa7, 0x85, 0x53, 0xcb,
	0xce, 0x5d, 0x45, 0xee, 0xb1, 0xe7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xb9, 0x5a, 0x60,
	0x18, 0x02, 0x00, 0x00,
}
