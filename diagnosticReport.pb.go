// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diagnosticReport.proto

package buffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DiagnosticReport struct {
	AssertedDate       string                 `protobuf:"bytes,1,opt,name=assertedDate" json:"assertedDate,omitempty"`
	Code               *Code                  `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Evidence           []*Evidence            `protobuf:"bytes,3,rep,name=evidence" json:"evidence,omitempty"`
	Text               *Text                  `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	OnsetDateTime      string                 `protobuf:"bytes,5,opt,name=onsetDateTime" json:"onsetDateTime,omitempty"`
	ClinicalStatus     string                 `protobuf:"bytes,6,opt,name=clinicalStatus" json:"clinicalStatus,omitempty"`
	Performer          []*DiagnosticPerformer `protobuf:"bytes,7,rep,name=performer" json:"performer,omitempty"`
	BodySite           []*BodySite            `protobuf:"bytes,8,rep,name=bodySite" json:"bodySite,omitempty"`
	Id                 string                 `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Subject            *Subject               `protobuf:"bytes,10,opt,name=subject" json:"subject,omitempty"`
	Category           []*Category            `protobuf:"bytes,11,rep,name=category" json:"category,omitempty"`
	Severity           *Severity              `protobuf:"bytes,12,opt,name=severity" json:"severity,omitempty"`
	BasedOn            []*BasedOn             `protobuf:"bytes,13,rep,name=basedOn" json:"basedOn,omitempty"`
	Issued             string                 `protobuf:"bytes,14,opt,name=issued" json:"issued,omitempty"`
	EffectiveDateTime  string                 `protobuf:"bytes,15,opt,name=effectiveDateTime" json:"effectiveDateTime,omitempty"`
	Status             string                 `protobuf:"bytes,16,opt,name=status" json:"status,omitempty"`
	PresentedForm      []*PresentedForm       `protobuf:"bytes,17,rep,name=presentedForm" json:"presentedForm,omitempty"`
	Asserter           *Asserter              `protobuf:"bytes,18,opt,name=asserter" json:"asserter,omitempty"`
	Stage              *Stage                 `protobuf:"bytes,19,opt,name=stage" json:"stage,omitempty"`
	ResourceType       string                 `protobuf:"bytes,20,opt,name=resourceType" json:"resourceType,omitempty"`
	Context            *Context               `protobuf:"bytes,21,opt,name=context" json:"context,omitempty"`
	VerificationStatus string                 `protobuf:"bytes,22,opt,name=verificationStatus" json:"verificationStatus,omitempty"`
	Result             []*Result              `protobuf:"bytes,23,rep,name=result" json:"result,omitempty"`
	Meta               *Meta                  `protobuf:"bytes,24,opt,name=meta" json:"meta,omitempty"`
}

func (m *DiagnosticReport) Reset()                    { *m = DiagnosticReport{} }
func (m *DiagnosticReport) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticReport) ProtoMessage()               {}
func (*DiagnosticReport) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *DiagnosticReport) GetAssertedDate() string {
	if m != nil {
		return m.AssertedDate
	}
	return ""
}

func (m *DiagnosticReport) GetCode() *Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *DiagnosticReport) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *DiagnosticReport) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *DiagnosticReport) GetOnsetDateTime() string {
	if m != nil {
		return m.OnsetDateTime
	}
	return ""
}

func (m *DiagnosticReport) GetClinicalStatus() string {
	if m != nil {
		return m.ClinicalStatus
	}
	return ""
}

func (m *DiagnosticReport) GetPerformer() []*DiagnosticPerformer {
	if m != nil {
		return m.Performer
	}
	return nil
}

func (m *DiagnosticReport) GetBodySite() []*BodySite {
	if m != nil {
		return m.BodySite
	}
	return nil
}

func (m *DiagnosticReport) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiagnosticReport) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *DiagnosticReport) GetCategory() []*Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *DiagnosticReport) GetSeverity() *Severity {
	if m != nil {
		return m.Severity
	}
	return nil
}

func (m *DiagnosticReport) GetBasedOn() []*BasedOn {
	if m != nil {
		return m.BasedOn
	}
	return nil
}

func (m *DiagnosticReport) GetIssued() string {
	if m != nil {
		return m.Issued
	}
	return ""
}

func (m *DiagnosticReport) GetEffectiveDateTime() string {
	if m != nil {
		return m.EffectiveDateTime
	}
	return ""
}

func (m *DiagnosticReport) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DiagnosticReport) GetPresentedForm() []*PresentedForm {
	if m != nil {
		return m.PresentedForm
	}
	return nil
}

func (m *DiagnosticReport) GetAsserter() *Asserter {
	if m != nil {
		return m.Asserter
	}
	return nil
}

func (m *DiagnosticReport) GetStage() *Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *DiagnosticReport) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *DiagnosticReport) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *DiagnosticReport) GetVerificationStatus() string {
	if m != nil {
		return m.VerificationStatus
	}
	return ""
}

func (m *DiagnosticReport) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DiagnosticReport) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Result struct {
	Reference string `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Result) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

type PresentedForm struct {
	Hash        string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Language    string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Creation    string `protobuf:"bytes,4,opt,name=creation" json:"creation,omitempty"`
	ContentType string `protobuf:"bytes,5,opt,name=contentType" json:"contentType,omitempty"`
	Data        string `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

func (m *PresentedForm) Reset()                    { *m = PresentedForm{} }
func (m *PresentedForm) String() string            { return proto.CompactTextString(m) }
func (*PresentedForm) ProtoMessage()               {}
func (*PresentedForm) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *PresentedForm) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PresentedForm) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *PresentedForm) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PresentedForm) GetCreation() string {
	if m != nil {
		return m.Creation
	}
	return ""
}

func (m *PresentedForm) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *PresentedForm) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type DiagnosticPerformer struct {
	Actor *Actor `protobuf:"bytes,1,opt,name=actor" json:"actor,omitempty"`
}

func (m *DiagnosticPerformer) Reset()                    { *m = DiagnosticPerformer{} }
func (m *DiagnosticPerformer) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticPerformer) ProtoMessage()               {}
func (*DiagnosticPerformer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *DiagnosticPerformer) GetActor() *Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func init() {
	proto.RegisterType((*DiagnosticReport)(nil), "buffer.DiagnosticReport")
	proto.RegisterType((*Result)(nil), "buffer.Result")
	proto.RegisterType((*PresentedForm)(nil), "buffer.PresentedForm")
	proto.RegisterType((*DiagnosticPerformer)(nil), "buffer.DiagnosticPerformer")
}

func init() { proto.RegisterFile("diagnosticReport.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdb, 0x4e, 0x1b, 0x3d,
	0x10, 0xc7, 0x95, 0x00, 0x81, 0x38, 0x07, 0xc0, 0x1c, 0x3e, 0x8b, 0xaf, 0x17, 0x51, 0x5a, 0x21,
	0x2a, 0xa1, 0x5c, 0xd0, 0xab, 0xb6, 0x57, 0x1c, 0xda, 0xbb, 0xaa, 0xc8, 0xe1, 0x05, 0x1c, 0x7b,
	0x36, 0xb8, 0x4a, 0xd6, 0x91, 0x3d, 0x8b, 0xc8, 0x13, 0xf5, 0x95, 0xfa, 0x38, 0x95, 0xc7, 0xbb,
	0x4b, 0x96, 0x72, 0xb7, 0xfe, 0xfd, 0xff, 0x1e, 0xcf, 0x8c, 0x3d, 0xcb, 0x4e, 0x8d, 0x55, 0xf3,
	0xdc, 0x05, 0xb4, 0x5a, 0xc2, 0xca, 0x79, 0x9c, 0xac, 0xbc, 0x43, 0xc7, 0x3b, 0xb3, 0x22, 0xcb,
	0xc0, 0x9f, 0xf5, 0xb5, 0x5b, 0x2e, 0x5d, 0x9e, 0xe8, 0xf8, 0xcf, 0x2e, 0x3b, 0xb8, 0x7b, 0xb5,
	0x81, 0x8f, 0x59, 0x5f, 0x85, 0x00, 0x1e, 0xc1, 0xdc, 0x29, 0x04, 0xd1, 0x1a, 0xb5, 0x2e, 0xba,
	0xb2, 0xc1, 0xf8, 0x88, 0x6d, 0x6b, 0x67, 0x40, 0xb4, 0x47, 0xad, 0x8b, 0xde, 0x55, 0x7f, 0x92,
	0xa2, 0x4f, 0x6e, 0x9d, 0x01, 0x49, 0x0a, 0xbf, 0x64, 0x7b, 0xf0, 0x64, 0x0d, 0xe4, 0x1a, 0xc4,
	0xd6, 0x68, 0xeb, 0xa2, 0x77, 0x75, 0x50, 0xb9, 0xbe, 0x95, 0x5c, 0xd6, 0x8e, 0x18, 0x0f, 0xe1,
	0x19, 0xc5, 0x76, 0x33, 0xde, 0x03, 0x3c, 0xa3, 0x24, 0x85, 0x7f, 0x60, 0x03, 0x97, 0x07, 0xc0,
	0x78, 0xfc, 0x83, 0x5d, 0x82, 0xd8, 0xa1, 0xb4, 0x9a, 0x90, 0x9f, 0xb3, 0xa1, 0x5e, 0xd8, 0xdc,
	0x6a, 0xb5, 0x98, 0xa2, 0xc2, 0x22, 0x88, 0x0e, 0xd9, 0x5e, 0x51, 0xfe, 0x99, 0x75, 0x57, 0xe0,
	0x33, 0xe7, 0x97, 0xe0, 0xc5, 0x2e, 0xa5, 0xf7, 0x7f, 0x75, 0xe8, 0x4b, 0x43, 0xee, 0x2b, 0x8b,
	0x7c, 0x71, 0xc7, 0xc2, 0x66, 0xce, 0xac, 0xa7, 0x16, 0x41, 0xec, 0x35, 0x0b, 0xbb, 0x29, 0xb9,
	0xac, 0x1d, 0x7c, 0xc8, 0xda, 0xd6, 0x88, 0x2e, 0x25, 0xd1, 0xb6, 0x86, 0x7f, 0x64, 0xbb, 0xa1,
	0x98, 0xfd, 0x02, 0x8d, 0x82, 0x51, 0xad, 0xfb, 0xd5, 0xe6, 0x69, 0xc2, 0xb2, 0xd2, 0xe3, 0x41,
	0x5a, 0x21, 0xcc, 0x9d, 0x5f, 0x8b, 0x5e, 0xf3, 0xa0, 0xdb, 0x92, 0xcb, 0xda, 0x11, 0xdd, 0x01,
	0x9e, 0xc0, 0x5b, 0x5c, 0x8b, 0x3e, 0x45, 0xae, 0xdd, 0xd3, 0x92, 0xcb, 0xda, 0x11, 0xd3, 0x98,
	0xa9, 0x00, 0xe6, 0x67, 0x2e, 0x06, 0x14, 0xba, 0x4e, 0xe3, 0x26, 0x61, 0x59, 0xe9, 0xfc, 0x94,
	0x75, 0x6c, 0x08, 0x05, 0x18, 0x31, 0xa4, 0x2a, 0xca, 0x15, 0xbf, 0x64, 0x87, 0x90, 0x65, 0xa0,
	0xd1, 0x3e, 0x41, 0x7d, 0x29, 0xfb, 0x64, 0xf9, 0x57, 0x88, 0x51, 0x42, 0xba, 0x90, 0x83, 0x14,
	0x25, 0xad, 0xf8, 0x57, 0x36, 0x58, 0x79, 0x08, 0x90, 0x23, 0x98, 0xef, 0xce, 0x2f, 0xc5, 0x21,
	0xa5, 0x73, 0x52, 0xa5, 0x73, 0xbf, 0x29, 0xca, 0xa6, 0x37, 0xd6, 0x5c, 0xbe, 0x4a, 0x2f, 0x78,
	0xb3, 0xe6, 0xeb, 0x92, 0xcb, 0xda, 0xc1, 0xdf, 0xb3, 0x9d, 0x80, 0x6a, 0x0e, 0xe2, 0x88, 0xac,
	0x83, 0xba, 0x3d, 0x11, 0xca, 0xa4, 0xc5, 0xc7, 0xef, 0x21, 0xb8, 0xc2, 0x6b, 0x78, 0x58, 0xaf,
	0x40, 0x1c, 0xa7, 0xc7, 0xbf, 0xc9, 0x62, 0xf3, 0xb4, 0xcb, 0xe9, 0xbd, 0x9e, 0x34, 0xef, 0xf0,
	0x36, 0x61, 0x59, 0xe9, 0x7c, 0xc2, 0x78, 0xec, 0x78, 0x66, 0xb5, 0x42, 0xeb, 0xf2, 0xf2, 0x4d,
	0x9e, 0x52, 0xd0, 0x37, 0x14, 0x7e, 0xce, 0x3a, 0x1e, 0x42, 0xb1, 0x40, 0xf1, 0x1f, 0xf5, 0x61,
	0x58, 0x45, 0x96, 0x44, 0x65, 0xa9, 0xc6, 0x79, 0x59, 0x02, 0x2a, 0x21, 0x9a, 0xf3, 0xf2, 0x03,
	0x50, 0x49, 0x52, 0xc6, 0xe7, 0xac, 0x93, 0xf6, 0xf0, 0x77, 0xac, 0xeb, 0x21, 0x03, 0x4f, 0xa3,
	0x98, 0x86, 0xf9, 0x05, 0x8c, 0x7f, 0xb7, 0xd8, 0xa0, 0xd1, 0x64, 0xce, 0xd9, 0xf6, 0xa3, 0x0a,
	0x8f, 0xa5, 0x95, 0xbe, 0xf9, 0x19, 0xdb, 0x5b, 0xa8, 0x7c, 0x5e, 0xc4, 0xf6, 0xb5, 0x89, 0xd7,
	0x6b, 0x7e, 0xcc, 0x76, 0xd0, 0xe2, 0x22, 0x8e, 0x79, 0x14, 0xd2, 0x22, 0xee, 0xd0, 0x1e, 0xa8,
	0x36, 0x9a, 0xea, 0xae, 0xac, 0xd7, 0x7c, 0xc4, 0x7a, 0xd4, 0xa0, 0x1c, 0xa9, 0xc7, 0x69, 0x92,
	0x37, 0x51, 0xcc, 0xc1, 0x28, 0x54, 0xe5, 0xf4, 0xd2, 0xf7, 0xf8, 0x0b, 0x3b, 0x7a, 0x63, 0x34,
	0xe3, 0xb5, 0x2a, 0x8d, 0xce, 0x53, 0xbe, 0x1b, 0xd7, 0x7a, 0x1d, 0xa1, 0x4c, 0xda, 0xac, 0x43,
	0xff, 0xbb, 0x4f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0xcd, 0xa3, 0x0d, 0x1f, 0x05, 0x00,
	0x00,
}
